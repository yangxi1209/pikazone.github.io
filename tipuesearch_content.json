{"pages":[{"url":"/pages/about.html","text":"About this blog","tags":"pages","title":"About"},{"url":"/pages/collectings.html","text":"Languages Markdown语法 Interesting blogs and personal websites and forums http://michaelnielsen.org/ (Quantum, Machine learning, ... ) DPD Forum: tutorials Kai Zhang | Soft Matter Research Kai Zhang: Books Kai Zhang: Codes Paintings Andrew Werth (incredibly beautiful paintings! ) Fortran Wiki Fortran Wiki Algorithms and codes: Monte Carlo Tree Search Code development: 很多教程及资源, 关于MKL, MPI, 等等","tags":"pages","title":"Collectings"},{"url":"/event-driven-molecular-dynamics.html","text":"Event-Driven Molecular Dynamics","tags":"Misc","title":"Event-Driven Molecular Dynamics"},{"url":"/inkscape-notes.html","text":"3D Cube made of Crosses","tags":"Misc","title":"Inkscape学习笔记"},{"url":"/active-matter-bi-ji.html","text":"20170714 Active-Matter Thermodynamics Under Pressure ... Is defining the equation of state for active matter merely of academic interest? For now, we don't know. It could become influential if researchers are able to produce practically use- ful active materials or to extend the elegant experiments and theories that describe self-propelled disks and colloids to na- ture's most abundant type of active matter: cells. Biological systems are typically associated with different symmetries and conservation laws than granular and colloidal systems. Defining an equation of state for cell tissue would, without a doubt, be a breakthrough. But for the theoretical, experimen- tal, and simulation tools available today, such a description is still out of reach.","tags":"Misc","title":"Active Matter 笔记"},{"url":"/friend-help-gromacs-gaff.html","text":"Gromacs GAFF (Amber tool, GPL)","tags":"Misc","title":"Gromacs+GAFF力场计算有机分子组装 (友情赞助, 不断更新)"},{"url":"/wl-changelog.html","text":"代码2017-11-28(也在开发中, 还未最终发布) 之前的涉及到WCA或者hardsphere的代码, 计算的coor, SID的结果不具有参考价值. 因为里面的if嵌套, 先 < rc 再 < rcut_coor, 但对WCA, hardsphere并不适用, 在2017-11-28 cell-list代码修改时, 对此处进行了修改, 改为两个独立if, 并且 dist > 0 (默认pairdist设为-1.0). 2017/11/27 笔记本上测试, fortran二维数组赋值(无论统一初值还是各个元素不一样的值), 统一向量化赋值不如双重循环快. 2017/11/23 除了cluster-WL-code.fixed-cluster-pcf-bug.20170707.tar.gz 之外, 其它的代码(之前的chain以及基于此, 最近开发的semiflexible chain), 都有一个bug, 有时会产生错误: 每次对一帧构型计算pcf(calc_single_pcf), sum_pcf_num_xx 都进行一次初始化: sum_pcf_num_xx = 0 有时, 所有粒子对的距离都大于rcut, 这时依然是sum_pcf_num_xx = 0, 如果还计算dble(pcf_num_xx(i))/dble(sum_pcf_num_xx) 会使得pcf 3d 的第三列为NaN 解决办法: :::fortran sub calc_group_pcf 中: 添加判断 sum_pcf_num_xx是否为0的if语句 :::fortran if (sum_pcf_num_xx /= 0) then do i=0, reachbin_idx(1) pcf_xx(i) = dble(pcf_num_xx(i))/dble(sum_pcf_num_xx) enddo endif 2017/07/06 发现wl cluster中的一个bug, 会使得pcf计算出现无穷大 NaN, 已找到方法避免, 打包备份cluster-WL-code.fixed-cluster-pcf-bug.20170707.tar.gz 目前是一个基本的, 能跑起来, 结果正确与MD对照的cluster-WL程序. 未来还会在此基础上开发, 添加功能, 增大可算的尺寸. 2017/03/20 cluster-WL-code.add-single-particle-moves.20170320.tar.gz (lj2nn, 可用一个模板f90设定参数后编译出对应n的执行程序) 2016/09/xx (2016/05/xx有一个eip初始化bug, 已经在2016/09/xx中修正) lj2nn wl chain sidmap (主要是homo, 但hetero也可用, 并且2016/09 修正了6-3 eip的一个初始化bug), 是多个独立的程序, 还没有改造成从一个模板f90编译 2015/04/15 wl chain hetero 程序 (无完整sidmap功能, 但可计算基态百分数; 后继10-10程序可以计算最低10个能级的各态百分数. 功能有些记不清了, 回去仔细看当时的输出文件4-17-2015)","tags":"科研","title":"wl changelog"},{"url":"/wo-de-shu-dan-chi-xu-geng-xin.html","text":"","tags":"我的书单","title":"我的书单(持续更新)"},{"url":"/lispxue-xi-bi-ji.html","text":"目前使用 计算机程序的构造与解释 这本书 命令行输入: rlwrap mit-scheme","tags":"Misc","title":"Lisp学习笔记"},{"url":"/alphago-related-things.html","text":"AlphaGo自我学习棋谱公开(每天10盘, 共50盘) DeepMind publications inside DeepMind (video) DeepMind open source open-sourcing DeepMind Lab DeepMind Lab is a fully 3D game-like platform tailored for agent-based AI research. ('agent-based' -> Netlogo?) TensorFlow, Sonnet(TensorFlow-based neural network library) Sonnet Github page DeepMind Github page (including several different repos) DeepMind目前使用 TensorFlow . 查找发现最近又有个PyTorch(说是更pythonic的东西, 但不清楚是否好用) pytorch PyTorch is a deep learning framework that puts Python first (nvidia以及一些高校参与了开发). 知乎上关于PyTorch入门的推荐 新手如何入门PyTorch","tags":"machine learning","title":"AlphaGo related things"},{"url":"/physics-meets-machine-learning.html","text":"最近AlphaGo与柯洁的对战又火了, youtube DeepMind视频地址: 柯洁对阵 AlphaGo：第三局 直播 知乎上关于物理与机器学习的专栏: 当物理与机器学习相遇 这个网页整理了很多关于物理与机器学习的论文: https://physicsml.github.io/pages/papers.html 机器学习与物理的结合能走多远, 还不是很清楚. 上面的论文有一些发现, machine learning可以区分order和disorder的构型, 对此我觉得并不稀奇. 定义一些序参量, 可以捕捉到相变信号, 这是物理行当中一直在做的事. 可能想要捕捉一些复杂体系的转变, 序参量难以定义时, 可以考虑尝试机器学习. 看新闻报道里说, 围棋棋盘是L=19, 19x19个格点, 考虑每个格点有两种状态, 这样总状态数是2&#94;(19x19), 非常大, 而机器学习可以通过一些算法在其中找出最优的构型. 对此我觉得也不稀奇. 考虑统计物理里Ising model, Q-state Potts model的研究, 体系尺寸都已经做到了比19x19大得多, 而且还要考虑围棋上没有的周期性边界条件. 这些更大的体系, 现在都有Wang-Landau sampling/Multicanonical sampling来采样microcanonical density of states, 并且可以reweighting到canonical ensemble, 充分(可能各态历经还需要再看看, 不过19x19的格点模型可能并不太难, 并且已经有更复杂体系确切数出基态的个数了, 比如Guangjie Shi, 2014 PRE研究了lattice HP polymer model)遍历体系的构型空间(microcanonical -> canonical, multiple temperature) 或许可以考虑计算一个3-state 19x19 model, 3 state 包括 黑棋, 白棋, 空闲 这3种状态. 相互作用参数可以模仿Ising model, 无周期性边界条件. 可以WL计算这个模型的density of states, 并且rw到多个温度. 还可以定义特定参量, 描述不同的构型, 这样可以将体系组态空间投影到特定自由能面上, 看随温度(能级)体系的状态的变化(棋局所处的状态对应到状态空间某个点, 有特定的热力学几率访问到). 然后还可以考虑做动力学, 以连接不同热力学状态(下棋是动力学过程). 然后可以根据围棋规则, 选出那些能获胜的最终帧, 并且从始态出发(19x19全为空, 或者有一个落子), 找通往这些获胜帧的transition path. 可能想找到全部的态, 全部的transition path会比较困难(还没有尝试, 也没有系统查文献里的评论), 但是可能找到其中的一些子集还是比较可行的. alphago可能找到的也是其中一些子集? mc决策树的查找, 也不是完备的?! 可能想要遍历构型空间(或者transition path空间)中的全部点还是很难, 但是机器学习可能可以 偏向地 找出其中我们感兴趣的一个子集? (Monte Carlo tree search?)","tags":"statistical physics, machine learning","title":"Physics meets machine learning"},{"url":"/ji-suan-mo-ni-de-ruan-jian-bao-fen-xi-cheng-xu-he-chang-yong-ku-sui-shou-geng-xin-ye-shi-gei-zi-ji-de-bei-wang.html","text":"Markov State Model (MSM): PyEMMA 现在的网址是: http://www.emma-project.org MSMBuilder 现在的网址是: http://msmbuilder.org (补充: SimTk是一个好网站, 从上面可以找到大量正在开发的面向模拟的软件, 可以一淘. 软件是否好用就得试一试了.) MSM相关, 好用的包(python): PyEMMA, msmtools, ... msmtools (low-level interface to basic algorithms, 适合自己调用) PyEMMA (high-level interface to MSM functionalities) Path sampling (python, 2016 开始在github上开发) 或者官网: http://openpathsampling.org 官网包含一些适合初学者的例子, 比如: flexible length TPS on Alanine Dipeptide 非常值得一试\\(&#94;o&#94;)/ (开发者是: Jan-Hendrik Prinz, David W.H. Swenson, John Chodera, Peter Bolhuis) Lammps Lammps 是一个功能强大的模拟程序包. 最近发现一个相关的非常好的 模拟论坛 , 还带了 知乎专栏 和微信公众号. 其它有趣的东西: pywonderland (包含代码, 从py脚本生成精美的图片. 可以学习PIL以及一些其它的Python包, 还有POV-RAY的python相关包的应用例子) Reaction-diffusion systems","tags":"molecular simulation, data analysis, computational toolkit","title":"计算模拟的软件包, 分析程序和常用库 (随手更新, 也是给自己的备忘)"},{"url":"/basic-knowledge-in-molecular-simulation.html","text":"structure factor S(q) radial distribution function g(r) the relation between S(q) and g(r) mean square displacement diffusion constant D Umbrella Sampling transition path sampling","tags":"Misc","title":"分子模拟中一些基本参量和方法(基本原理和技术细节, 持续更新)"},{"url":"/trying-sphinx.html","text":"IBM 关于Sphinx的入门 文档","tags":"Tech","title":"尝试Sphinx"},{"url":"/pov-rayxue-xi-bi-ji.html","text":"POV-Ray 可以通过.pov建立对象并渲染, 最终输出图片. 通过POV-Ray, 可以批量处理, 渲染图片. Youtube上有详细的POV-Ray入门教程, 可以一步一步地跟着敲代码调试. POV-Ray网站上有一些精彩的 示例 . 可以通过.pov脚本建立非常复杂的场景并渲染. 又比如网上搜到的一个例子: 通过下面几行代码生成(命令行输入povray test.pov): // Code // render with +w500 +h500 global_settings{assumed_gamma 2.2} #default{finish{ambient 1}} camera{ orthographic right x*2 up y*2 location -z*100 look_at 0 } #declare native_motif= pigment{ gradient y triangle_wave #declare V=0; #while(V<1) translate y*.75 rotate z*45.2 //rotate -z*45.1 scale .98 warp{repeat x*5 flip x} #declare V=V+1/100; #end scale .1 } plane{z,-1 pigment{ native_motif color_map{[0 rgb 0][.5 rgb<.5,.3,.1>][1 rgb 1]} } } // End Code 还不太清楚Blender能否与povray交互, 识别对方的文件.","tags":"制图建模","title":"POV-Ray学习笔记"},{"url":"/blenderxue-xi-bi-ji.html","text":"2017-03-15 第1个project 初试Blender, 按Youtube上的 教程 做了一个小杯子: 完整的Blender文件及图片压缩包可以在 这里 下载.","tags":"制图建模","title":"Blender学习笔记"},{"url":"/complexity-softwares.html","text":"NetLogo中文资源站点: NetLogo建模之美 NetLogo编程指南: NetLogo 5.0 用户手册 Agent-Based Models (附带模型和许多学习资料): https://www.openabm.org","tags":"资源搜集","title":"Complexity"},{"url":"/gpu-cudabian-cheng-xue-xi.html","text":"2017/03/01 CUDA的入门可以从这里开始 ( An Even Easier Introduction to CUDA ), 当然后继还是得看书:P 2017/03/03 继numba之后, 又发现一个python包支持cuda编程, 而且文档详细: PyCUDA https://documen.tician.de/pycuda/tutorial.html#getting-started PyCUDA简介看这个 个人blog网页 , 里面还有其它很多可看的页面.","tags":"programming","title":"GPU CUDA编程学习"},{"url":"/bo-ke-bei-wang.html","text":"折腾了几个小时, 博客总算上线了\\(&#94;o&#94;)/. 特地记下提交新日志的流程备忘. 在content中写一个md文件, 生成页面并本地观看: pelican /path/to/content for python 2: cd output python -m SimpleHTTPServer for python 3: cd output python -m http.server 然后提交到github page: cd output git init git add . git commit -m \"first commit\" git remote add origin https://github.com/xxx/xxx.github.io.git git push -u origin master 注意, 如果自己的github上已有这个repo 而又没有提前pull到本地, 并且想直接用本地整体覆盖github repo 可以在提交时加上 --force, 不要用mix相关的命令, 页面会与原来的混合, 乱码 git push -u origin master --force 在git push时, 需要用户名和密码. 如果不想每次输入, 可以在本机上 touch ~/.git-credentials, 然后文件中键入 https://username:passwd@github.com 再git config --global credential.helper store 执行完看 ~/.gitconfig 会多一项: [credential] helper = store 并且git bash 也可免输密码登录, 详情可看下面的帖子: http://ju.outofmemory.cn/entry/253212","tags":"Tech","title":"博客备忘"},{"url":"/ge-ren-bo-ke-shang-xian-liao.html","text":"我开博了. 这个博客将用来记录我日常学习生活的点滴. 建立这个博客的目的是放一些读书笔记, 这样可以治自己的拖延症, 通过不断更新读书笔记来达到读一本书的目的. 读的书包括技术方面, 比如学一门编程语言, 算法, 或特定技术; 更重要的是专业相关的, 有深度的书. 一些感兴趣的方向也可能通过博文来加深自己的理解, 也方便与大家交流. 当然, 日常一些有趣的发现, 又不太好放入正式文档记录的(记录后容易被忽略), 也会放在这里. 总而言之, 帮助自己坚持深入学习, 和记录有趣的点滴, 是建立这个博客的目的.","tags":"Misc","title":"个人博客上线了"},{"url":"/ce-shi.html","text":"中文能正常显示吗? 测试latex: $E=mc&#94;2$ \\(1+1=2\\) $\\alpha, \\beta, ..., \\omega$ $x_i&#94;2$ $$\\int_a&#94;b f(x)dx$$","tags":"Misc","title":"测试"}]}